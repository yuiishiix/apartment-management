import logging

from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
from rest_framework.views import APIView
from .models import Payment, Tenant
from .serializers import PaymentSerializer, PaymentReceiptSerializer, LateFeeAssessmentSerializer


class TenantPaymentsListView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, tenantId):
        try:
            tenant = Tenant.objects.get(id=tenantId)
            payments = Payment.objects.filter(tenant=tenant)
            serializer = PaymentSerializer(payments, many=True)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Tenant.DoesNotExist:
            return Response({"error": "Tenant not found"}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
class SubmitPaymentView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, tenantId):
        data = request.data
        try:
            tenant = Tenant.objects.get(id=tenantId)
            payment = Payment.objects.create(
                tenant=tenant,
                amount=data['amount'],
                method=data['method']
            )
            serializer = PaymentSerializer(payment)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        except Tenant.DoesNotExist:
            return Response({"error": "Tenant not found"}, status=status.HTTP_404_NOT_FOUND)


class PaymentReceiptView(APIView):

    def get(self, request, paymentId):
        try:
            # Retrieve the payment using paymentId
            payment = Payment.objects.get(id=paymentId)

            # Serialize the payment data (could be expanded to generate a receipt)
            serializer = PaymentReceiptSerializer(payment)

            # Return the payment receipt data
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Payment.DoesNotExist:
            return Response({"error": "Payment not found"}, status=status.HTTP_404_NOT_FOUND)


logger = logging.getLogger(__name__)


class AssessLateFeeView(APIView):
    def post(self, request):
        data = request.data
        print(f"Received data: {data}")  # Debugging the incoming data

        apartment_number = data.get("apartment_number")
        overdue_days = data.get("overdue_days")

        if not apartment_number or not overdue_days:
            print("Missing required fields: apartment_number or overdue_days")
            return Response({"error": "Apartment number and overdue days are required."},
                            status=status.HTTP_400_BAD_REQUEST)

        try:
            tenant = Tenant.objects.get(user__apartment_number=apartment_number)
            print(f"Found tenant: {tenant}")

            payment = Payment.objects.get(tenant=tenant)
            print(f"Found payment for tenant {tenant.id}: {payment}")

            serializer = LateFeeAssessmentSerializer(data={
                'tenant_id': tenant.id,
                'overdue_days': overdue_days
            })

            if serializer.is_valid():
                result = serializer.create(serializer.validated_data)
                return Response(result, status=status.HTTP_200_OK)
            else:
                print(f"Serializer errors: {serializer.errors}")
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Tenant.DoesNotExist:
            print(f"Tenant not found: {apartment_number}")
            return Response({"error": "Tenant not found."}, status=status.HTTP_404_NOT_FOUND)
        except Payment.DoesNotExist:
            print(f"Payment not found for tenant: {apartment_number}")
            return Response({"error": "Payment record not found."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            print(f"Unexpected error: {str(e)}")
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

