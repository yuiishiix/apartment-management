from rest_framework import serializers
from payments.models import Payment  # Updated import
from decimal import Decimal

# ✅ Payment Serializer
class PaymentSerializer(serializers.ModelSerializer):
    amount = serializers.DecimalField(max_digits=10, decimal_places=2, min_value=Decimal('0.01'))  # Fix applied ✅

    class Meta:
        model = Payment
        fields = ['id', 'tenant', 'amount', 'payment_date', 'method']

    def create(self, validated_data):
        return Payment.objects.create(**validated_data)

class PaymentReceiptSerializer(serializers.ModelSerializer):
    class Meta:
        model = Payment
        fields = ['id', 'tenant', 'amount', 'payment_date', 'method', 'receipt_number']

    def create(self, validated_data):
        return Payment.objects.create(**validated_data)


class LateFeeAssessmentSerializer(serializers.Serializer):
    tenant_id = serializers.IntegerField()
    overdue_days = serializers.IntegerField()
    calculated_late_fee = serializers.DecimalField(max_digits=10, decimal_places=2)

    def validate(self, data):
        overdue_days = data.get('overdue_days')
        if overdue_days < 0:
            raise serializers.ValidationError("Overdue days cannot be negative.")
        return data

    def calculate_late_fee(self, payment, overdue_days):
        # You can define your own logic for calculating late fees
        late_fee_per_day = Decimal('5.00')  # Example: $5 per day overdue
        return late_fee_per_day * overdue_days

    def create(self, validated_data):
        tenant_id = validated_data['tenant_id']
        overdue_days = validated_data['overdue_days']
        payment = Payment.objects.get(tenant__id=tenant_id)

        calculated_late_fee = self.calculate_late_fee(payment, overdue_days)

        # Optionally, update the payment record with the late fee
        payment.late_fee = calculated_late_fee
        payment.save()

        return {'tenant_id': tenant_id, 'overdue_days': overdue_days, 'calculated_late_fee': calculated_late_fee}
